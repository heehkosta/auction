* 웹 프로젝트 리포트: 온라인 쇼핑몰
  팀멤버:
  황 희[heehkosta [at] gmail.com](구매 및 검색 핵심기능 설계 및 연동)\\
  안균석(백엔드 로직구현 및 DB연동)\\
  이태규(데이터베이스 )\\
  이은선(프론트엔드)\\

* 문서의 목적
  이 문서는 옥션 프로젝트의 기능과 목적에 대해 설명합니다. 이 문서는 다음의 \\
  상세설명을 포함하고있습니다.
  
  1. 유저 인터페이스
  2. 핵심기능 필요조건
  3. 비기능 필요조건
  4. 프로젝트 스케쥴 / 마일스톤


* 문서의 대상
  이 문서는 컴퓨터와 전산쪽 백그라운드가 있는 사람을 목표로하고있습니다. \\
  기본적인 자바 웹 어플리케이션 개발 및 서버 데이터베이스 상호작용을 이해하면 도움이 됩니다.\\

* 업데이트와 차후 변화
  에자일 메써드에 기반하여, 이 제품은 개발이 진행됨에 따라 더 발전되는것을 목표로하고, \\
  이 문서 역시 마찬가지입니다. 프로젝트 예정시간은 완벽을 목표로하지 않지만 마일스톤은 \\
  제시간에 끝내야 합니다.

* 소개
  이 제품은, 기존 쇼핑몰 사이트들의 디자인이 너무 장황한데에 기반하여 시작되었습니다. \\
  너무 많은 광고와, 선택지에 휩쓸려 정작 자신이 쇼핑하기는 불편하고, \\
  이를 개선하기위해 사용자가 원하는 기능에 최대한 초점을 맞추고 나머지를\\ 
  억누르는 방식을 통해 쇼핑의 간편화를 최대한 도모한 제품입니다.\\

* 벤치마킹 대상 웹 사이트: 온라인 옷 쇼핑몰(http://dahong.com)

** 잘 되어있는점
   상품을 보여주는데에 집중한 레이아웃

** 개선할점
   1. 현재 이너웨어 및 스커트는 하위분류가 나와있지 않음
   2. 검색창은 마우스를 올려 놓아야 활성화 되며, 사이즈가 작음
   3. 검색 제안 기능이 없음
   4. 실제 검색이나 판매결과에 상관없는 이미지(주문폭주! 단독특가! 등)
      
* 핵심기능
** 검색
   1) 이름으로 검색: 상품이름이 포함되어 있을경우 결과물을 테이블 형식으로 표시
   2) 카테고리별로 검색
   3) 키워드 제안
   4) 주문 마감시간

** 구매
   1) 장바구니 기능 구현: 세션

** 기타
   1. 회원가입
   2. 로그인
   3. 로그아웃

   
* 프로젝트 타임라인

  |-------------+----------------------------------------------------|
  | Date        | Contents                                           |
  |-------------+----------------------------------------------------|
  | 4/12 - 4/13 | * 주제 선정 및 데이터베이스 테이블 확정                 |
  |-------------+----------------------------------------------------|
  | 4/14 - 4/16 | * 검색: 검색결과 테이블, 아이템 상세설명                |
  |             | * 프론트엔드: 인덱스-서블릿-데이터베이스-뷰 연동         |
  |             | * 백엔드:                                           |
  |             | - 테이블별로 vo및 dao 확정                            |
  |             | - SearchController.java 구현                        |
  |             | - ItemController 구현                               |
  |             | * 데이터베이스:                                      |
  |             | - 검색 관련 쿼리문 구현, 유닛 테스트,                  |
  |             | - DAO, JDBC 동연                                    |
  |             | * 부가기능: 구글맵 item_result.jsp 내부에 포함         |
  |-------------+----------------------------------------------------|
  | 4/18 - 4/20 | * 프론트엔드:                                        |
  |             | buy_result.jsp,                                    |
  |             | * 백엔드:                                           |
  |             | BuyController.java 구현,                            |
  |             | 인덱스-서블릿-데이터베이스-뷰 연동                      |
  |             | * 데이터베이스: 구매 관련 쿼리문 구현,                  |
  |             | 유닛테스트, DAO, JDBC 연동                           |
  |             | * 부가기능: 장바구니, 로그인                           |
  |-------------+----------------------------------------------------|
  | 4/21 - 4/23 | * 프론트엔드: sell_result.jsp                        |
  |             | * 백엔드:                                           |
  |             | - SellController.java구현,                          |
  |             | - 인덱스-서블릿-데이터베이스-뷰 연동                    |
  |             | * 데이터베이스:                                       |
  |             | - 구매관련 쿼리문 구현, 유닛테스트, DAO, JDBC 연동       |
  |-------------+-----------------------------------------------------|
  | 4/25 - 4/26 | * 검색제안 구현                                       |
  |-------------+-----------------------------------------------------|
  
 
* 프로젝트 마일스톤
  |------+-------------------------|
  | Date | Milestone               |
  |------+-------------------------|
  | 4/16 | 유저 인증 기능 구현        |
  | 4/19 | 검색기능 구현             |
  | 4/22 | 판매기능 구현             |
  | 4/26 | 부가기능 구현 및 테스팅    |
  | 4/27 | 프리젠테이션              |
  |------+-------------------------|


* 배운점
** MVC 팩토리 모델에서 웹프로젝트 작업의 순서
   1. 데이터베이스 테이블 작성
   2. DAO(Data Access Object)작성
   3. View와 연결

** DAO 로직 테스트 방법론
   커넥션풀을 활용한 웹 프로젝트 작성시에, 프로그래머는 작업의 상당량을 톰캣에\\
   위임하기에, 데이터베이스와 DAO로직 테스팅을 하기가 어렵다. \\
   이유는 데이터 소스 방식시 디스패쳐와 서블릿을 모두 통과해야 하기때문이다.\\
   즉 테스트를 하려면 View와 Controller, 그리고 DispatcherServlet 모두 \\
   구현을 해야한다는 얘기다. \\

   가능은하겠지만, 작업이 복잡해 짐에따라 디버깅이 배로 어려워지고, \\
   시간낭비가 심하므로 영리한 선택이 아니다.\\

   따라서, DB와 DAO 작성시에는 독립된 main 메써드를 만들어서 테스트 해야한다.\\

** DB테스트는 DAO테스트와 다르다는것을 이해
   DB상에서 쿼리가 돌아간다고 해서 테스트를 통과했다고 생각해선 안된다. \\
   쿼리 완성후 반드시 DAO에서 별도의 main함수에서 비즈니스 로직을 테스트 해야한다.\\


** 알고리즘과 뷰단이 어떻게 연관되는지 설명할 수 있어야 한다.
   알고리즘이 별로 없다면 뷰단이 확 나와야 한다.

** 2주라면 그냥 좋은 사이트 따라가면 되는거다. 검색은 잘 만들어야 함.

** 즉 중요한건 엉망이고 잘하고가 중요가 아니라, 무언가를 극복해 냈다는 자신감이다. 
   그냥 완벽하고 깔끔하게 하면 된다.
